initSidebarItems({"fn":[["spawn","Spawns a new asynchronous task, returning a `JoinHandle` for it."]],"mod":[["aggregate","Module containing support for the Aggergate pattern."],["inmemory","Module containing utilities using in-memory backend strategy."],["optional","Module for the Aggregate extension trait using an `Option` state."],["repository","Module containing Repository implementation to retrieve, save and delete Aggregates."],["store","Module containing support for the Event Store."],["subscription","Module containing support for Subscriptions to Events coming from the Event Store."],["sync","Module containing the synchronization primitives used by the library."],["versioning","Module containing support for Optimistic Concurrency using Versioning."]],"struct":[["AggregateRoot","An [`AggregateRoot`] represents an handler to the [`Aggregate`] it’s managing, such as:"],["AggregateRootBuilder","Builder type for new [`AggregateRoot`] instances."],["Projector","A `Projector` manages the state of a single `Projection` by opening a long-running stream of all events coming from the `EventStore`."],["Repository","Implementation of the Repository pattern for storing, retrieving and deleting `Aggregate`s."]],"trait":[["Aggregate","An [`Aggregate`] manages a domain entity `State`, acting as a transaction boundary."],["AggregateExt","Extension trait with some handy methods to use with [`Aggregate`]s."],["EventStore","An Event Store is an append-only, ordered list of `Event`s for a certain “source” – e.g. an `Aggregate`."],["EventSubscriber","Component to let users subscribe to newly-inserted events into the [`EventStore`]."],["Projection","A `Projection` is an optimized read model (or materialized view) of an `Aggregate` model(s), that can be assembled by left-folding its previous state and a number of ordered, consecutive events."],["Subscription","A Subscription to an [`EventStream`] which can be “checkpointed”: keeps a record of the latest message processed by itself using [`Subscription::checkpoint`], and can resume working from such message by using the [`Subscription::resume`]."],["Versioned","Data type that carries a version for Optimistic Concurrency Control."]],"type":[["AggregateId","A short extractor type for the [`Aggregate`] `Id`."]]});