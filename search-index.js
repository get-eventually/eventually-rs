var searchIndex = JSON.parse('{\
"eventually":{"doc":"","t":[0,0,0,0,0,0,0,8,13,13,3,16,16,16,3,4,16,13,8,8,13,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,6,16,8,10,13,13,16,6,16,13,13,3,8,6,16,16,4,4,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,10,12,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,8,11,11,11,11,11,11,11,11,11,11,11,12,10,12,11,11,11,11,11,11,13,3,13,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0,0,3,11,11,11,11,11,11,11,11,11,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11],"n":["aggregate","command","event","message","metadata","test","version","Aggregate","AggregateRootNotFound","AppendToStore","Context","Error","Error","Event","EventSourcedRepository","EventSourcedRepositoryError","Id","RehydrateAggregate","Repository","Root","StreamFromStore","aggregate","aggregate_id","apply","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","ctx","ctx_mut","fmt","fmt","fmt","from","from","from","from","from","get","get","id","into","into","into","record_new","record_that","source","store","store","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","0","0","0","Command","Error","Handler","handle","All","Any","AppendError","Event","Event","From","MustBe","Persisted","Store","Stream","StreamError","StreamId","StreamVersionExpected","VersionSelect","append","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","eq","eq","eq","fmt","fmt","fmt","from","from","from","into","into","into","ne","ne","ne","payload","serialize","stream","stream_id","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","0","0","Message","Payload","borrow","borrow_mut","clone","clone_into","deserialize","eq","fmt","from","from","from","into","metadata","name","payload","serialize","to_owned","try_from","try_into","type_id","with_metadata","Boolean","Metadata","Number","String","Value","add","add_boolean","add_float","add_integer","add_string","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","deserialize","deserialize","eq","eq","fmt","fmt","from","from","get","into","into","into_iter","iter","ne","ne","serialize","serialize","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","0","0","0","command_handler","store","Scenario","borrow","borrow_mut","from","given","into","try_from","try_into","type_id","when","EventStoreExt","InMemory","Tracking","append","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","into","into","recorded_events","reset_recorded_events","stream","stream","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_recorded_events_tracking","ConflictError","Version","actual","borrow","borrow_mut","clone","clone_into","eq","expected","fmt","fmt","from","into","ne","to_owned","to_string","try_from","try_into","type_id"],"q":["eventually","","","","","","","eventually::aggregate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eventually::aggregate::EventSourcedRepositoryError","","","eventually::command","","","","eventually::event","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eventually::event::StreamVersionExpected","eventually::event::VersionSelect","eventually::message","","","","","","","","","","","","","","","","","","","","","","eventually::metadata","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eventually::metadata::Value","","","eventually::test","","eventually::test::command_handler","","","","","","","","","","eventually::test::store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eventually::version","","","","","","","","","","","","","","","","","",""],"d":["Module containing support for the Aggregate pattern.","Module containing support for Domain Commands.","Module <code>event</code> contains types and abstractions helpful for …","","","","","An Aggregate represents a Domain Model that, through an …","This error is retured by <code>EventSourcedRepository::get</code> when …","This error is returned by <code>EventSourcedRepository::store</code> …","A context object that should be used by the Aggregate Root …","The error type that can be returned by <code>Aggregate::apply</code> …","The error type that can be returned by the Repository …","The type of Domain Events that interest this Aggregate. …","An Event-sourced implementation of the Repository …","List of possible errors that can be returned by an …","The type used to uniquely identify the Aggregate.","This error is returned by <code>EventSourcedRepository::get</code> when …","A Repository is an object that allows to load and save an …","An Aggregate Root represents the Domain Entity object used …","This error is returned by <code>EventSourcedRepository::get</code> when …","Returns read access to the Aggregate state.","Convenience method to resolve the Aggregate unique …","Mutates the state of an Aggregate through a Domain Event.","","","","","","","","","Provides read access to an Aggregate Root Context.","Provides write access to an Aggregate Root Context.","","","","","","","","","Loads an Aggregate Root instance from the data store, …","","Returns the unique identifier for the Aggregate instance.","","","","Creates a new Aggregate instance by applying the specified …","Records a change to the Aggregate, expressed by the …","","Stores a new version of an Aggregate Root instance to the …","","","","","","","","","","","","","","","","A Command represents an intent by an Actor (e.g. a User, …","The error type returned by the Handler while handling a …","A software component that is able to handle Commands of a …","Handles a Command and returns an error if the handling has …","Selects all [Events] in the Event Stream.","Disables any kind of optimistic concurrency check, …","The error type returned by the Store during an [<code>append</code>] …","An Event is a Message carring the information about a …","The type containing all Domain Events recorded by the …","Selects all [Events] in the Event Stream starting from the …","Sets the expectation that the Event Stream must be at the …","An Event that has been persisted to the Event Store.","An Event Store, used to store Domain Events in Event …","Stream is a stream of Persisted Domain Events.","The error type returned by the Store during a [<code>stream</code>] …","The type used to uniquely identify each Event Stream …","Specifies an expectation on the Event Stream version …","Specifies the slice of the Event Stream to select when …","Appens new Domain Events to the specified Event Stream.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The actual Domain Event carried by this envelope.","","Opens an Event Stream, effectively streaming all Domain …","The id of the Event Stream the persisted Event belongs to.","","","","","","","","","","","","","The version of the Event Stream when this Event has been …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Module exposing a test Scenario type to write Domain …","","A test scenario that can be used to test a Command Handler …","","","","Sets the precondition state of the system for the Scenario…","","","","","Specifies the Command to test in the Scenario, in the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,1,0,2,3,2,0,0,2,1,0,0,1,4,5,2,6,4,1,6,4,1,4,4,5,5,4,1,1,6,6,6,4,1,3,6,2,6,4,1,4,4,1,3,6,4,1,6,4,1,6,4,1,6,4,1,7,8,9,0,10,0,10,11,12,13,0,13,11,12,0,0,0,13,13,0,0,13,14,11,12,14,11,12,14,11,12,14,11,12,14,14,11,12,14,11,12,14,11,12,14,11,12,14,11,12,14,14,13,14,14,11,12,14,11,12,14,11,12,14,11,12,14,15,16,0,0,17,17,17,17,17,17,17,17,17,17,17,17,18,17,17,17,17,17,17,17,19,0,19,19,0,20,20,20,20,20,19,20,19,20,19,20,19,20,20,19,20,19,20,19,20,19,20,20,19,20,20,20,19,20,19,20,19,20,19,20,19,20,19,20,21,22,23,0,0,0,24,24,24,24,24,24,24,24,24,0,0,0,25,26,25,26,25,26,25,26,25,26,25,25,26,25,26,25,26,26,26,25,26,25,26,25,26,25,26,25,26,27,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[["option",4]],["result",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["context",3]],[[]],[[],["context",3]],[[],["context",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["never",15]]],[[]],[[]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[]],[[]],[[]],[[]],[[["event",6]],[["result",4,["context"]],["context",3]]],[[["event",6]],["result",4]],[[],[["error",8],["option",4,["error"]]]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[],[["pin",3,["box"]],["box",3,["future"]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[["command",6]],[["pin",3,["box"]],["box",3,["future"]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["streamversionexpected",4],["vec",3,["event"]],["event",6]],[["box",3,["future"]],["pin",3,["box"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["persisted",3]],[[],["versionselect",4]],[[],["streamversionexpected",4]],[[]],[[]],[[]],[[],["result",4]],[[["persisted",3]],["bool",15]],[[["versionselect",4]],["bool",15]],[[["streamversionexpected",4]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[["persisted",3]],["bool",15]],[[["versionselect",4]],["bool",15]],[[["streamversionexpected",4]],["bool",15]],null,[[],["result",4]],[[["versionselect",4]],["stream",6]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[]],[[]],[[],["message",3]],[[]],[[],["result",4]],[[["message",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[]],[[["never",15]]],[[]],null,[[],["str",15]],null,[[],["result",4]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,[[["string",3],["value",4]]],[[["string",3],["bool",15]]],[[["string",3],["f64",15]]],[[["string",3],["i32",15]]],[[["string",3]]],[[]],[[]],[[]],[[]],[[],["value",4]],[[],["metadata",3]],[[]],[[]],[[],["metadata",3]],[[],["result",4]],[[],["result",4]],[[["value",4]],["bool",15]],[[["metadata",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15]],[["option",4,["value"]],["value",4]]],[[]],[[]],[[]],[[]],[[["value",4]],["bool",15]],[[["metadata",3]],["bool",15]],[[],["result",4]],[[],["result",4]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,null,[[]],[[]],[[]],[[["vec",3,["persisted"]],["persisted",3]],["scenariogiven",3]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[["command",6]],["scenariowhen",3]],null,null,null,[[["streamversionexpected",4],["vec",3,["event"]],["event",6]],[["box",3,["future"]],["pin",3,["box"]]]],[[["streamversionexpected",4],["vec",3,["event"]],["event",6]],[["box",3,["future"]],["pin",3,["box"]]]],[[]],[[]],[[]],[[]],[[],["inmemory",3]],[[],["tracking",3]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[],[["persisted",3],["vec",3,["persisted"]]]],[[]],[[["versionselect",4]],["stream",6]],[[["versionselect",4]],["stream",6]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["tracking",3]],null,null,null,[[]],[[]],[[],["conflicterror",3]],[[]],[[["conflicterror",3]],["bool",15]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["conflicterror",3]],["bool",15]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[4,"EventSourcedRepositoryError"],[8,"Aggregate"],[8,"Repository"],[3,"Context"],[8,"Root"],[3,"EventSourcedRepository"],[13,"RehydrateAggregate"],[13,"StreamFromStore"],[13,"AppendToStore"],[8,"Handler"],[4,"VersionSelect"],[4,"StreamVersionExpected"],[8,"Store"],[3,"Persisted"],[13,"MustBe"],[13,"From"],[3,"Message"],[8,"Payload"],[4,"Value"],[3,"Metadata"],[13,"String"],[13,"Number"],[13,"Boolean"],[3,"Scenario"],[3,"InMemory"],[3,"Tracking"],[8,"EventStoreExt"],[3,"ConflictError"]]},\
"eventually_postgres":{"doc":"<code>eventually</code> type implementations for PostgreSQL.","t":[0,0,0,13,13,13,4,3,3,3,6,13,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,13,13,3,6,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,4,3,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12],"n":["store","subscriber","subscription","Bb8","DecodeEvent","EncodeEvents","Error","EventStore","EventStoreBuilder","EventStoreBuilderMigrated","PoolResult","Postgres","Result","append","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","builder","clone","clone_into","fmt","fmt","fmt","for_aggregate","from","from","from","from","from","from","into","into","into","into","is_conflict_error","migrate_database","remove","source","stream","stream_all","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","0","0","0","0","Connection","Deserialize","EventSubscriber","Result","SubscriberError","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","into","into","new","subscribe_all","to_owned","to_owned","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","0","0","Checkpoint","Error","Persistent","PersistentBuilder","Store","Subscriber","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","checkpoint","fmt","fmt","from","from","from","get_or_create","into","into","into","new","resume","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","0","0","0"],"q":["eventually_postgres","","","eventually_postgres::store","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eventually_postgres::store::Error","","","","eventually_postgres::subscriber","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eventually_postgres::subscriber::SubscriberError","","eventually_postgres::subscription","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","eventually_postgres::subscription::Error","",""],"d":["Contains an <code>EventStore</code> implementation using PostgreSQL as …","Contains an <code>EventSubscriber</code> implementation using PostgreSQL","Contains a persisted implementation of the <code>Subscription</code> …","Error returned by bb8 connection pool.","Error when decoding persistent events from the database …","Error when encoding the events in <code>append</code> to JSON prior to …","Error type returned by the <code>EventStore</code> implementation, …","<code>EventStore</code> implementation using a PostgreSQL backend.","Builder type for <code>EventStore</code> instances.","Builder step for <code>EventStore</code> instances, after the database …","Result returning the connection pool <code>Error</code> type.","Error returned by Postgres when executing queries.","Result returning the crate <code>Error</code> type.","","","","","","","","","","Creates a new <code>EventStore</code> instance using the specified name …","Returns a new builder instance after migrations have been …","","","","","","Creates a new <code>EventStore</code> for an <code>Aggregate</code> type.","","","","","","","","","","","","Ensure the database is migrated to the latest version.","","","","","","","","","","","","","","","","","","","","","","","","","","","Error variant returned when the connection, used for <code>LISTEN</code>","Error variant returned when deserializing payloads coming …","Subscriber for listening to new events committed to an …","Alias type for a <code>Result</code> having <code>SubscriberError</code> as error …","Error returned by the <code>TryStream</code> on <code>subscribe_all</code>","","","","","","","","","","","","","","","Opens a new <code>LISTEN</code> stream on the database pointed by the …","","","","","","","","","","","","","","","Error variant returned when an issue has occurred during …","Error types returned by a <code>Persistent</code> Subscription.","<code>Subscription</code> type with persistent state over a Postgres …","Builder type for multiple <code>Persistent</code> Subscription instance.","Error variant returned when the cause of the error is …","Error variant returned when the cause of the error is …","","","","","","","","","","","","","Creates a new <code>Persisted</code> Subscription with the specified …","","","","Creates a new <code>PersistentBuilder</code> instance.","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,1,1,1,0,0,0,0,0,1,0,2,3,4,1,2,3,4,1,2,4,3,2,2,1,1,2,4,3,4,1,1,1,2,3,4,1,2,1,3,2,1,2,2,2,1,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,5,6,7,8,9,9,0,0,0,9,10,9,10,9,10,9,10,9,9,9,10,9,10,10,10,9,10,9,9,10,9,10,9,10,9,10,11,12,13,0,0,0,13,13,14,15,13,14,15,13,15,13,13,14,15,13,14,14,15,13,14,15,13,13,14,15,13,14,15,13,14,15,13,14,15,13,16,17,18],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["expected",4],["vec",3]],[["boxfuture",6,["result"]],["result",6,["u32"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[["postgresconnectionmanager",3],["pool",3,["postgresconnectionmanager"]]],["eventstorebuildermigrated",3]],[[],["eventstore",3]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["str",15]]],[[]],[[]],[[["runerror",4,["error"]],["error",3]]],[[["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[["postgresconnectionmanager",3],["pool",3,["postgresconnectionmanager"]]]],[[],[["result",6],["boxfuture",6,["result"]]]],[[],[["error",8],["option",4,["error"]]]],[[["select",4]],[["boxfuture",6,["result"]],["result",6,["eventstream"]]]],[[["select",4]],[["boxfuture",6,["result"]],["result",6,["eventstream"]]]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[],["subscribererror",4]],[[],["eventsubscriber",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["str",15]]],[[],["eventstream",6]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]],[["box",3,["future"]],["pin",3,["box"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["string",3]]],[[]],[[]],[[]],[[["eventsubscriber",3],["pool",3,["postgresconnectionmanager"]],["postgresconnectionmanager",3],["eventstore",3]]],[[],["subscriptionstream",6]],[[],[["error",8],["option",4,["error"]]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,null],"p":[[4,"Error"],[3,"EventStore"],[3,"EventStoreBuilder"],[3,"EventStoreBuilderMigrated"],[13,"DecodeEvent"],[13,"EncodeEvents"],[13,"Postgres"],[13,"Bb8"],[4,"SubscriberError"],[3,"EventSubscriber"],[13,"Deserialize"],[13,"Connection"],[4,"Error"],[3,"PersistentBuilder"],[3,"Persistent"],[13,"Store"],[13,"Subscriber"],[13,"Checkpoint"]]},\
"eventually_redis":{"doc":"Redis backend implementation for <code>eventually</code> crate.","t":[3,3,3,3,3,17,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["Builder","BuilderWithSourceName","EventStore","EventSubscriber","PersistentSubscription","STREAM_PAGE_DEFAULT","append","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build_persistent_subscription","build_store","build_subscriber","checkpoint","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","from","from","from","from","from","into","into","into","into","into","new","remove","resume","source_name","stream","stream_all","stream_page_size","stream_page_size","subscribe_all","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id"],"q":["eventually_redis","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Builder type for <code>EventStore</code> and <code>EventSubscriber</code> types.","Second-step builder type for <code>EventStore</code> and <code>EventSubscriber</code>…","Redis backend implementation for <code>eventually::EventStore</code> …","Redis backend implementation for …","<code>Subscription</code> implementation with persistent state over a …","Default size of a paginated request to Redis …","","","","","","","","","","","","Builds a new named <code>PersistentSubscription</code> instance.","Builds a new <code>EventStore</code> instance.","Builds a new <code>EventSubscriber</code> instance.","","","","","","","","","","","","","","","","","","","","","","Creates a new builder instance using the specified Redis …","","","Assignes the specified source name to a copy of the …","","","Changes the page size used by the <code>Stream</code> returned in …","Changes the page size used by the <code>Stream</code> returned in …","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,1,1,2,3,4,5,1,2,3,4,5,5,5,5,3,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,4,1,3,4,1,1,4,5,2,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5,1,2,3,4,5],"f":[null,null,null,null,null,null,[[["vec",3],["expected",4]],[["boxfuture",6,["result"]],["result",4,["u32","storeerror"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["str",15]]],[[]],[[],["eventsubscriber",3]],[[["u32",15]],[["pin",3,["box"]],["box",3,["future"]]]],[[],["eventstore",3]],[[],["eventsubscriber",3]],[[],["persistentsubscription",3]],[[],["builder",3]],[[],["builderwithsourcename",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["client",3]]],[[],[["result",4,["storeerror"]],["boxfuture",6,["result"]]]],[[],["subscriptionstream",6]],[[["str",15]],["builderwithsourcename",3]],[[["select",4]],[["result",4,["storeeventstream","storeerror"]],["boxfuture",6,["result"]]]],[[["select",4]],[["result",4,["storeeventstream","storeerror"]],["boxfuture",6,["result"]]]],[[["usize",15]]],[[["usize",15]]],[[],["subscribereventstream",6]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]]],"p":[[3,"EventStore"],[3,"EventSubscriber"],[3,"PersistentSubscription"],[3,"Builder"],[3,"BuilderWithSourceName"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};