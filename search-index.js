var searchIndex = JSON.parse('{\
"bank_accounting":{"doc":"","t":"AAAAAAADDDDMMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLMLLLLMLLLLLLLLLLLLLLLLNNDEEGGGDNNNNNNNNDGNNNNNNNNLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMMMMMMMMMMDLLLLLLLLLLLLLLLLFDDDRDDDMMMMMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLAMLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLIDLLLLLLLKLLLLLLLLLLKLLLLLLLLLDNENDDNDNDNDNDNDNMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLLLLLLLLLLLLLLLLLLLLMMLMMLLLLLLLLLMMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLF","n":["application","domain","grpc","postgres","proto","serde","tracing","DepositInBankAccount","OpenBankAccount","SendTransferToBankAccount","Service","amount","bank_account_holder_id","bank_account_id","bank_account_id","bank_account_id","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","handle","handle","handle","into","into","into","into","into_request","into_request","into_request","into_request","message","name","name","name","opening_balance","to_owned","to_owned","to_owned","to_owned","transaction","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","AlreadyClosed","AlreadyOpened","BankAccount","BankAccountError","BankAccountEvent","BankAccountHolderId","BankAccountId","BankAccountRepository","BankAccountRoot","Closed","DepositWasRecorded","EmptyAccountHolderId","EmptyAccountId","InsufficientFunds","NegativeDepositAttempted","NoMoneyDeposited","NotOpenedYet","Transaction","TransactionId","TransferWasConfirmed","TransferWasDeclined","TransferWasReceived","TransferWasSent","WasClosed","WasOpened","WasReopened","WrongTransactionRecipient","aggregate_id","amount","apply","beneficiary_account_id","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","close","deposit","deref","deref_mut","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","id","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","name","open","receive_transfer","record_transfer_success","reopen","send_transfer","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_name","vzip","vzip","vzip","vzip","vzip","account_holder_id","amount","id","initial_balance","message","message","reason","reopening_balance","transaction","transaction","transaction_id","transaction_id","BankAccountingApi","borrow","borrow_mut","clone","clone_into","deposit_in_bank_account","from","from","from_ref","into","into_request","open_bank_account","to_owned","try_from","try_into","type_id","vzip","connect","DepositInBankAccountRequest","DepositInBankAccountResponse","Event","FILE_DESCRIPTOR_SET","OpenBankAccountRequest","OpenBankAccountResponse","Transaction","amount","amount","bank_account_holder_id","bank_account_id","bank_account_id","bank_accounting_server","beneficiary_account_id","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","event","event","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","id","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","opening_balance","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","BankAccounting","BankAccountingServer","accept_compressed","borrow","borrow_mut","call","call","clone","clone_into","deposit_in_bank_account","fmt","from","from_arc","from_ref","into","into_make_service","into_request","max_decoding_message_size","max_encoding_message_size","new","open_bank_account","poll_ready","poll_ready","send_compressed","to_owned","try_from","try_into","type_id","vzip","with_interceptor","DepositWasRecorded","DepositWasRecorded","Event","TransferWasConfimed","TransferWasConfirmed","TransferWasDeclined","TransferWasDeclined","TransferWasReceived","TransferWasReceived","TransferWasSent","TransferWasSent","WasClosed","WasClosed","WasOpened","WasOpened","WasReopened","WasReopened","account_holder_id","amount","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","clear","clear","clear","clear","clear","clear","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","default","default","default","default","default","default","default","default","encode","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","encoded_len","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","id","initial_balance","into","into","into","into","into","into","into","into","into","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","into_request","merge","msg","msg","msg","msg","reason","reason","reopening_balance","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","transaction","transaction","transaction_id","transaction_id","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","initialize"],"q":[[0,"bank_accounting"],[7,"bank_accounting::application"],[96,"bank_accounting::domain"],[228,"bank_accounting::domain::BankAccountEvent"],[240,"bank_accounting::grpc"],[257,"bank_accounting::postgres"],[258,"bank_accounting::proto"],[386,"bank_accounting::proto::bank_accounting_server"],[416,"bank_accounting::proto::event"],[610,"bank_accounting::tracing"],[611,"core::fmt"],[612,"core::fmt"],[613,"eventually::command"],[614,"core::future::future"],[615,"alloc::boxed"],[616,"core::pin"],[617,"tonic::request"],[618,"core::result"],[619,"core::any"],[620,"core::option"],[621,"rust_decimal::decimal"],[622,"eventually::aggregate"],[623,"alloc::string"],[624,"sqlx_postgres"],[625,"anyhow"],[626,"tonic::codec::compression"],[627,"http::request"],[628,"http_body"],[629,"core::marker"],[630,"core::fmt"],[631,"axum::routing::into_make_service"],[632,"core::task::wake"],[633,"core::task::poll"],[634,"tonic::service::interceptor"],[635,"tonic::service::interceptor"],[636,"prost::encoding"],[637,"prost::encoding"],[638,"bytes::buf::buf_impl"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Generated server implementations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Nested message and enum types in <code>Event</code>.","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generated trait containing gRPC methods that should be …","","Enable decompressing requests with the given encoding.","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","Limits the maximum size of a decoded message.","Limits the maximum size of an encoded message.","","","","","Compress responses with the given encoding, if the client …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Encodes the message to a buffer.","","","","","","","","","Returns the encoded length of the message without a length …","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Decodes an instance of the message from a buffer, and …","Returns the value of <code>msg</code>, or the default value if <code>msg</code> is …","Returns the value of <code>msg</code>, or the default value if <code>msg</code> is …","","","Returns the value of <code>reason</code>, or the default value if <code>reason</code>…","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,3,2,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,2,3,4,2,2,2,2,3,3,3,3,4,4,4,4,2,3,4,1,1,2,3,4,1,2,3,4,1,1,1,1,2,3,4,1,2,3,4,4,2,3,4,2,1,2,3,4,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,22,22,0,0,0,0,0,0,0,22,21,22,22,22,22,22,22,0,0,21,21,21,21,21,21,21,22,9,20,9,20,20,21,22,9,23,20,21,22,9,23,20,21,22,9,23,20,21,22,9,23,23,23,23,23,20,21,22,20,20,20,20,21,21,21,21,22,22,22,22,20,21,22,22,9,23,20,21,21,22,9,23,23,20,21,22,9,23,20,20,21,22,9,23,20,21,22,9,23,21,23,23,23,23,23,20,21,22,9,23,22,20,21,22,9,23,20,21,22,9,23,20,21,22,9,23,9,20,21,22,9,23,68,69,68,68,70,71,72,73,70,71,72,74,0,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,0,0,0,0,0,0,0,0,32,38,33,33,32,0,38,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,0,25,33,36,32,37,38,25,33,36,32,37,38,38,25,25,33,36,32,37,38,25,38,33,36,32,37,38,25,33,36,32,37,38,25,33,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,33,36,32,37,38,25,0,0,40,40,40,40,40,40,40,42,40,40,40,40,40,40,40,40,40,40,42,40,40,40,40,40,40,40,40,40,0,61,0,61,0,0,61,0,61,0,61,0,61,0,61,0,61,53,54,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,53,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,61,55,56,55,56,57,57,60,53,54,55,56,57,58,59,60,61,55,56,57,58,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,53,54,55,56,57,58,59,60,61,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[2,2],[3,3],[4,4],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[2,2],6],[[3,3],6],[[4,4],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[2,7],8],[[3,7],8],[[4,7],8],[-1,-1,[]],[-1,1,[[10,[9]]]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[1,[11,[4]]],[[14,[[13,[12]]]]]],[[1,[11,[2]]],[[14,[[13,[12]]]]]],[[1,[11,[3]]],[[14,[[13,[12]]]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,[2,16],[3,16],[4,16],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[9],0,[[[19,[9]]],[[17,[9]]]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[20,20],[21,21],[22,22],[9,9],[23,23],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[23,[[17,[5,22]]]],[[23,24],[[17,[5,22]]]],[23],[23],[[20,20],6],[[21,21],6],[[22,22],6],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[20,7],8],[[21,7],8],[[22,7],8],[[22,7],8],[[9,7],8],[[23,7],8],[-1,-1,[]],[25,21],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[[[26,[9]]],23],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[21,16],[[27,28,[19,[24]]],[[17,[23,22]]]],[[23,20,[19,[29]]],[[17,[5,22]]]],[[23,30],[[17,[5,22]]]],[[23,[19,[24]]],[[17,[5,22]]]],[[23,20,[19,[29]]],[[17,[5,22]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,29,[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[[],16],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[31,31],[[-1,-2],5,[],[]],[[31,[15,[32]]],[[14,[[13,[12]]]]]],[1,31],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[[31,[15,[33]]],[[14,[[13,[12]]]]]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[],[[35,[34]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[33,5],[36,5],[32,5],[37,5],[38,5],[25,5],[33,33],[36,36],[32,32],[37,37],[38,38],[25,25],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],33],[[],36],[[],32],[[],37],[[],38],[[],25],[33,39],[36,39],[32,39],[37,39],[38,39],[25,39],[[33,33],6],[[36,36],6],[[32,32],6],[[37,37],6],[[38,38],6],[[25,25],6],0,0,[[33,7],8],[[36,7],8],[[32,7],8],[[37,7],8],[[38,7],8],[[25,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[20,38],[21,25],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[40,[-1]],41],[[40,[-1]]],42],[-1,-2,[],[]],[-1,-2,[],[]],[[[40,[-1]],[43,[-2]]],[],42,[44,45]],[[-1,[43,[-2]]],[],[],[]],[[[40,[-1]]],[[40,[-1]]],42],[[-1,-2],5,[],[]],[[-1,[15,[32]]],[[14,[[13,[12]]]]],[]],[[[40,[-1]],7],8,[46,42]],[-1,-1,[]],[[[47,[-1]]],[[40,[-1]]],42],[-1,-1,[]],[-1,-2,[],[]],[-1,[[48,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[40,[-1]],39],[[40,[-1]]],42],[[[40,[-1]],39],[[40,[-1]]],42],[-1,[[40,[-1]]],42],[[-1,[15,[33]]],[[14,[[13,[12]]]]],[]],[[-1,49],[[50,[[17,[5]]]]],[]],[[[40,[-1]],49],[[50,[[17,[5]]]]],42],[[[40,[-1]],41],[[40,[-1]]],42],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,-2,[],[]],[[-1,-2],[[51,[[40,[-1]],-2]]],42,52],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[53,5],[54,5],[55,5],[56,5],[57,5],[58,5],[59,5],[60,5],[53,53],[54,54],[55,55],[56,56],[57,57],[58,58],[59,59],[60,60],[61,61],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[-1,-2],5,[],[]],[[],53],[[],54],[[],55],[[],56],[[],57],[[],58],[[],59],[[],60],[[61,-1],5,62],[53,39],[54,39],[55,39],[56,39],[57,39],[58,39],[59,39],[60,39],[61,39],[[53,53],6],[[54,54],6],[[55,55],6],[[56,56],6],[[57,57],6],[[58,58],6],[[59,59],6],[[60,60],6],[[61,61],6],[[53,7],8],[[54,7],8],[[55,7],8],[[56,7],8],[[57,7],8],[[58,7],8],[[59,7],8],[[60,7],8],[[61,7],8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[[[19,[61]],63,64,-1,65],[[17,[5,66]]],67],[55,16],[56,16],0,0,[57,16],0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,18,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[16,[[35,[5]]]]],"c":[],"p":[[3,"Service",7],[3,"OpenBankAccount",7],[3,"DepositInBankAccount",7],[3,"SendTransferToBankAccount",7],[15,"tuple"],[15,"bool"],[3,"Formatter",611],[6,"Result",611],[3,"BankAccount",96],[8,"Repository",612],[6,"Envelope",613],[8,"Future",614],[3,"Box",615],[3,"Pin",616],[3,"Request",617],[15,"str"],[4,"Result",618],[3,"TypeId",619],[4,"Option",620],[3,"Transaction",96],[4,"BankAccountEvent",96],[4,"BankAccountError",96],[3,"BankAccountRoot",96],[3,"Decimal",621],[3,"Event",258],[3,"Root",622],[6,"BankAccountId",96],[6,"BankAccountHolderId",96],[3,"String",623],[6,"TransactionId",96],[3,"BankAccountingApi",240],[3,"DepositInBankAccountRequest",258],[3,"OpenBankAccountRequest",258],[6,"PgPool",624],[6,"Result",625],[3,"OpenBankAccountResponse",258],[3,"DepositInBankAccountResponse",258],[3,"Transaction",258],[15,"usize"],[3,"BankAccountingServer",386],[4,"CompressionEncoding",626],[8,"BankAccounting",386],[3,"Request",627],[8,"Body",628],[8,"Send",629],[8,"Debug",611],[3,"Arc",630],[3,"IntoMakeService",631],[3,"Context",632],[4,"Poll",633],[3,"InterceptedService",634],[8,"Interceptor",634],[3,"WasOpened",416],[3,"DepositWasRecorded",416],[3,"TransferWasSent",416],[3,"TransferWasReceived",416],[3,"TransferWasDeclined",416],[3,"TransferWasConfirmed",416],[3,"WasClosed",416],[3,"WasReopened",416],[4,"Event",416],[8,"BufMut",635],[15,"u32"],[4,"WireType",636],[3,"DecodeContext",636],[3,"DecodeError",637],[8,"Buf",638],[13,"WasOpened",228],[13,"DepositWasRecorded",228],[13,"TransferWasSent",228],[13,"TransferWasReceived",228],[13,"TransferWasDeclined",228],[13,"WasReopened",228],[13,"TransferWasConfirmed",228]]},\
"eventually":{"doc":"","t":"AAAAAAAIQQCQCDKLKLLLLLLLLLLLALLLLLKLCCCEQNNIQALLLLALLLLLKLKLLLLLDIIDLLLLLLLLLLLLLLLLLLLLLLNDENENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLGQIKMMADLLLLLLLLLNNIGQQNNDIGEIEKLLLLLLLLLLLLLLLLLLMLLLLLLLLLMMLAKMLLLLLLLLLLLLMIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLDIGLLLLLLLLLLLLMMKLLLLLQIKAAKDLLLLLLLLLLLLLLDLLLLLLLLLLLLLLIIDDLLLLLLLLLLLLLLLLLLLLLLLLLLLLDGMLLLLLLMLLLLLLLLL","n":["aggregate","command","event","message","serde","tracing","version","Aggregate","Error","Event","EventSourcedRepository","Id","Repository","Root","aggregate_id","aggregate_id","apply","borrow","borrow_mut","clone","clone_into","deref","eq","fmt","from","into","record_new","record_that","repository","to_aggregate_type","to_owned","try_from","try_into","type_id","type_name","version","AnyRepository","AnyRepositoryExt","EventSourced","GetError","GetError","Inner","NotFound","Repository","SaveError","any","borrow","borrow_mut","eq","equivalent","event_sourced","fmt","fmt","from","from","from","get","into","save","source","to_string","try_from","try_into","type_id","AnyError","AnyRepository","AnyRepositoryExt","AnyRepositoryImpl","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","from","from","from","get","into","into","save","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","with_any_errors","Append","EventSourced","GetError","Rehydrate","SaveError","Stream","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","get","into","into","into","save","source","source","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","Envelope","Error","Handler","handle","message","metadata","test","Scenario","borrow","borrow_mut","from","given","into","try_from","try_into","type_id","when","All","Any","Appender","Envelope","Error","Error","From","MustBe","Persisted","Store","Stream","StreamVersionExpected","Streamer","VersionSelect","append","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deserialize","eq","eq","eq","equivalent","equivalent","event","fmt","fmt","fmt","from","from","from","into","into","into","message","metadata","serialize","store","stream","stream_id","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","version","EventStoreExt","InMemory","Tracking","append","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","default","fmt","fmt","from","from","into","into","recorded_events","reset_recorded_events","stream","stream","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_recorded_events_tracking","Envelope","Message","Metadata","and_metadata","borrow","borrow_mut","clone","clone_into","deserialize","eq","fmt","from","from","from","into","message","metadata","name","serialize","to_owned","try_from","try_into","type_id","Error","Serde","deserialize","json","prost","serialize","JsonSerde","borrow","borrow_mut","clone","clone_into","default","deserialize","fmt","from","into","serialize","to_owned","try_from","try_into","type_id","MessageSerde","borrow","borrow_mut","clone","clone_into","default","deserialize","fmt","from","into","serialize","to_owned","try_from","try_into","type_id","AggregateRepositoryExt","EventStoreExt","InstrumentedAggregateRepository","InstrumentedEventStore","append","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","fmt","fmt","from","from","get","into","into","save","stream","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","with_tracing","with_tracing","ConflictError","Version","actual","borrow","borrow_mut","clone","clone_into","eq","equivalent","expected","fmt","fmt","from","into","to_owned","to_string","try_from","try_into","type_id"],"q":[[0,"eventually"],[7,"eventually::aggregate"],[36,"eventually::aggregate::repository"],[64,"eventually::aggregate::repository::any"],[90,"eventually::aggregate::repository::event_sourced"],[135,"eventually::command"],[142,"eventually::command::test"],[152,"eventually::event"],[214,"eventually::event::store"],[247,"eventually::message"],[270,"eventually::serde"],[276,"eventually::serde::json"],[291,"eventually::serde::prost"],[306,"eventually::tracing"],[338,"eventually::version"],[357,"core::option"],[358,"core::result"],[359,"core::clone"],[360,"core::cmp"],[361,"core::fmt"],[362,"core::fmt"],[363,"core::any"],[364,"core::fmt"],[365,"alloc::boxed"],[366,"core::pin"],[367,"core::error"],[368,"alloc::string"],[369,"anyhow"],[370,"alloc::vec"],[371,"serde::de"],[372,"serde::de"],[373,"serde::ser"],[374,"core::marker"],[375,"core::marker"],[376,"prost::message"],[377,"core::default"]],"d":["Module containing support for the Aggregate pattern.","Module containing support for Domain [Command]s.","Module <code>event</code> contains types and abstractions helpful for …","","","Module containing some extension traits to support code …","Contains the types necessary for Optimistic Locking …","An Aggregate represents a Domain Model that, through an …","The error type that can be returned by <code>Aggregate::apply</code> …","The type of Domain Events that interest this Aggregate. …","","The type used to uniquely identify the Aggregate.","","An Aggregate Root represents the Domain Entity object used …","Returns the unique identifier for the Aggregate instance.","Returns the unique identifier of the Aggregate.","Mutates the state of an Aggregate through a Domain Event.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Creates a new Aggregate Root instance by applying the …","Records a change to the Aggregate Root, expressed by the …","Module containing the definition of a Repository, to fetch …","Maps the Aggregate value contained within Root to a …","","","","","A unique name identifier for this Aggregate type.","Returns the current version for the Aggregate.","","","","Error returned by a call to Repository::get. This type is …","Error type returned by the concrete implementation of the …","Error variant returned by Repository::get when the …","This error is retured by Repository::get when the desired …","A Repository is an object that allows to load and save an […","Error type returned by the concrete implementation of the …","Contains an super-type that decorates a Repository …","","","","","Contains the impementation of the EventSourced Repository …","","","","Returns the argument unchanged.","","Loads an Aggregate Root instance from the data store, …","Calls <code>U::from(self)</code>.","Saves a new version of an Aggregate Root instance to the …","","","","","","Represents a generic, opaque kind of error. Powered by …","A Repository trait that uses opaque errors through AnyError…","Extension trait for Repository instances which errors …","The concrete super-type implementation that decorates a …","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","Converts the current Repository instance into an …","This error is returned by EventSourced::save when the …","An Event-sourced implementation of the Repository …","List of possible errors that can be returned by …","This error is returned by <code>EventSourced::get</code> when the …","List of possible errors that can be returned by …","This error is returned by <code>EventSourced::get</code> when the Event …","","","","","","","","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","A Command represents an intent by an Actor (e.g. a User, …","The error type returned by the Handler while handling a […","A software component that is able to handle [Command]s of …","Handles a [Command] and returns an error if the handling …","","","Module exposing a test Scenario type to write Domain […","A test scenario that can be used to test a [Command] …","","","Returns the argument unchanged.","Sets the precondition state of the system for the Scenario…","Calls <code>U::from(self)</code>.","","","","Specifies the [Command] to test in the Scenario, in the …","Selects all [Events] in the Event Stream.","Disables any kind of optimistic concurrency check, …","Interface used to append new Domain Events in an Event …","An Event is a [Message] carring the information about a …","The error type returned by the Store during a [<code>stream</code>] …","The error type returned by the Store during an [<code>append</code>] …","Selects all [Events] in the Event Stream starting from the …","Sets the expectation that the Event Stream must be at the …","An [Event] that has been persisted to the Event Store.","An [Event] Store, used to store Domain Events in Event …","Stream is a stream of Persisted Domain Events.","Specifies an expectation on the Event Stream version …","Interface used to stream Persisted Domain Events from an …","Specifies the slice of the Event Stream to select when …","Appens new Domain Events to the specified Event Stream.","","","","","","","","","","","","","","","","","","","The actual Domain Event carried by this envelope.","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","Contains implementations of the event::Store trait and …","Opens an Event Stream, effectively streaming all Domain …","The id of the Event Stream the persisted Event belongs to.","","","","","","","","","","","","","The version of the Event Stream when this Event has been …","Extension trait that can be used to pull in supertypes …","In-memory implementation of event::Store trait, backed by …","Decorator type for an event::Store implementation that …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the list of recoded Domain Events through this …","Resets the list of recorded Domain Events through this …","","","","","","","","","","","Returns a Tracking instance that decorates the original …","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","The error returned by the Serde::deserialize method.","A Serde can be used to serialize into and deserialize from …","Deserializes the given value from a message encoded in the …","Contains the [Serializer] and [Deserializer] compatible …","Contains the Serde compatible implementation using …","Serializes the given value into the wire format supported …","Implements the [Serializer] and [Deserializer] traits from …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Implements the Serde trait  which serializes and …","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Extension trait for any aggregate::Repository type to …","Extension trait for any event::Store type to provide …","aggregate::Repository type wrapper that provides …","event::Store type wrapper that provides instrumentation …","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Returns an instrumented version of the …","Returns an instrumented version of the event::Store …","This error is returned by a function when a version …","A version used for Optimistic Locking.","The actual Version value, which mismatch caused this error.","","","","","","","The Version value that was expected when calling the …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,0,0,0,2,2,0,2,0,0,2,1,2,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,2,1,0,0,0,0,28,17,17,0,28,0,17,17,17,17,0,17,17,17,17,17,28,17,28,17,17,17,17,17,0,0,0,0,27,25,27,25,25,25,27,25,25,27,27,25,27,25,25,27,25,27,25,27,25,61,32,0,0,31,0,31,31,32,29,31,32,29,29,29,31,31,32,32,29,31,32,32,32,29,29,29,29,31,32,29,29,31,32,29,31,32,31,32,29,31,32,29,31,32,29,0,62,0,62,33,33,0,0,34,34,34,34,34,34,34,34,34,39,38,0,0,63,64,39,38,0,0,0,0,0,0,64,35,39,38,35,39,38,35,39,38,35,39,38,35,35,39,38,39,38,35,35,39,38,35,39,38,35,39,38,12,12,35,0,63,35,35,39,38,35,39,38,35,39,38,35,39,38,35,0,0,0,45,50,45,50,45,50,45,50,45,50,45,45,50,45,50,45,50,50,50,45,50,45,50,45,50,45,50,45,50,65,0,0,0,51,51,51,51,51,51,51,51,51,51,51,51,51,51,37,51,51,51,51,51,66,0,66,0,0,66,0,54,54,54,54,54,54,54,54,54,54,54,54,54,54,0,55,55,55,55,55,55,55,55,55,55,55,55,55,55,0,0,0,0,58,59,58,59,58,59,58,59,58,59,58,59,58,59,59,58,59,58,59,58,59,58,59,58,59,58,67,68,0,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,[],[]],[[[1,[-1]]],[],2],[[[3,[-1]]],[[4,[-1]]],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1]]],[[1,[-1]]],[2,5]],[[-1,-2],6,[],[]],[[[1,[-1]]],[],2],[[[1,[-1]],[1,[-1]]],7,[2,8]],[[[1,[-1]],9],10,[2,11]],[-1,-1,[]],[-1,-2,[],[]],[12,[[4,[[1,[-1]]]]],2],[[[1,[-1]],12],[[4,[6]]],2],0,[[[1,[-1]]],-2,2,[[13,[-1]]]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],[[],15],[[[1,[-1]]],16,2],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[17,[-1]],[17,[-1]]],7,8],[[-1,-2],7,[],[]],0,[[[17,[-1]],9],10,11],[[[17,[-1]],9],10,18],[19,-1,[]],[-1,-1,[]],[-1,[[17,[-1]]],[]],[-1,[[22,[[21,[20]]]]],[]],[-1,-2,[],[]],[[-1,[1,[-2]]],[[22,[[21,[20]]]]],[],[]],[[[17,[-1]]],[[3,[23]]],23],[-1,24,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[25,9],10],[[25,9],10],[-1,-1,[]],[-1,-1,[]],[26,25],[[[27,[-1,-2]]],[[22,[[21,[20]]]]],2,[[28,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[27,[-1,-2]],[1,[-1]]],[[22,[[21,[20]]]]],2,[[28,[-1]]]],[25,[[3,[23]]]],[-1,24,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[27,[-2,-1]]],[],[]],0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1,-2]]],[[29,[-1,-2]]],[2,5],[30,5]],[[-1,-2],6,[],[]],[[[31,[-1,-2]],9],10,18,18],[[[31,[-1,-2]],9],10,11,11],[[[32,[-1]],9],10,11],[[[32,[-1]],9],10,18],[[[29,[-1,-2]],9],10,[2,11],[30,11]],[-1,-1,[]],[-1,[[32,[-1]]],[]],[19,-1,[]],[-1,-1,[]],[-1,-1,[]],[19,-1,[]],[-1,[[29,[-2,-1]]],30,2],[[[29,[-1,-2]]],[[22,[[21,[20]]]]],2,30],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[29,[-1,-2]],[1,[-1]]],[[22,[[21,[20]]]]],2,30],[[[31,[-1,-2]]],[[3,[23]]],23,23],[[[32,[-1]]],[[3,[23]]],23],[-1,-2,[],[]],[-1,24,[]],[-1,24,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,0,[[-1,[33,[-2]]],[[22,[[21,[20]]]]],[],[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[[34,[36,[[35,[-1,-2]]]]],[[0,[-1,-2]]],[],37],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],[[34,[33,[-1]]],[[0,[-2,-3,-1]]],37,[],37],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[-1,-2,38,[36,[[12,[-3]]]]],[[22,[[21,[20]]]]],[],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[35,[-1,-2]]],[[35,[-1,-2]]],5,[37,5]],[39,39],[38,38],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[-1,[[4,[[35,[-2,-3]]]]],40,41,[37,41]],[[[35,[-1,-2]],[35,[-1,-2]]],7,8,[37,8]],[[39,39],7],[[38,38],7],[[-1,-2],7,[],[]],[[-1,-2],7,[],[]],0,[[[35,[-1,-2]],9],10,11,[37,11]],[[39,9],10],[[38,9],10],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[[35,[-1,-2]],-3],4,42,[37,42],43],0,[[-1,-2,39],[[44,[-2,-3]]],[],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,14,[]],0,0,0,0,[[[45,[-1,-2]],-1,38,[36,[[12,[-2]]]]],[[22,[[21,[20]]]]],[5,46,47,48,49],[37,5,48,49]],[[[50,[-3,-1,-2]],-1,38,[36,[[12,[-2]]]]],[[22,[[21,[20]]]]],[5,48,49],[37,5,48,49],[[30,[-1,-2]],48,49]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[45,[-1,-2]]],[[45,[-1,-2]]],5,[37,5]],[[[50,[-3,-1,-2]]],[[50,[-3,-1,-2]]],[48,49,5],[37,48,49,5],[[30,[-1,-2]],48,49,5]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[],[[45,[-1,-2]]],[],37],[[[45,[-1,-2]],9],10,11,[37,11]],[[[50,[-3,-1,-2]],9],10,[48,49,11],[37,48,49,11],[[30,[-1,-2]],48,49,11]],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[50,[-3,-1,-2]]],[[36,[[35,[-1,-2]]]]],[5,48,49],[37,5,48,49],[[30,[-1,-2]],48,49]],[[[50,[-3,-1,-2]]],6,[5,48,49],[37,5,48,49],[[30,[-1,-2]],48,49]],[[[45,[-1,-2]],-1,39],[[44,[-1,-2]]],[5,46,47,48,49],[37,5,48,49]],[[[50,[-3,-1,-2]],-1,39],[[44,[-1,-2]]],[5,48,49],[37,5,48,49],[[30,[-1,-2]],48,49]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[50,[-1,-2,-3]]],[],[],[]],0,0,0,[[[51,[-1]],-2],[[51,[-1]]],37,52],[-1,-2,[],[]],[-1,-2,[],[]],[[[51,[-1]]],[[51,[-1]]],[37,5]],[[-1,-2],6,[],[]],[-1,[[4,[[51,[-2]]]]],40,[37,41]],[[[51,[-1]],[51,[-1]]],7,[37,8]],[[[51,[-1]],9],10,[37,11]],[19,-1,[]],[-1,[[51,[-1]]],37],[-1,-1,[]],[-1,-2,[],[]],0,0,[-1,15,[]],[[[51,[-1]],-2],4,[37,42],43],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],0,0,[[-1,[36,[53]]],[[4,[-2]]],[],[]],0,0,[[-1,-2],[[36,[53]]],[],[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[54,[-1]]],[[54,[-1]]],[42,48,49,41,5]],[[-1,-2],6,[],[]],[[],[[54,[-1]]],[42,48,49,41]],[[[54,[-1]],[36,[53]]],[[4,[-1]]],[42,48,49,41]],[[[54,[-1]],9],10,[42,48,49,41,11]],[-1,-1,[]],[-1,-2,[],[]],[[[54,[-1]],-1],[[36,[53]]],[42,48,49,41]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[[[55,[-1]]],[[55,[-1]]],[56,57,5]],[[-1,-2],6,[],[]],[[],[[55,[-1]]],[56,57,57]],[[[55,[-1]],[36,[53]]],[[4,[-1]]],[56,57]],[[[55,[-1]],9],10,[56,57,11]],[-1,-1,[]],[-1,-2,[],[]],[[[55,[-1]],-1],[[36,[53]]],[56,57]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],0,0,0,0,[[[58,[-3,-1,-2]],-1,38,[36,[[12,[-2]]]]],[[22,[[21,[20]]]]],[11,48,49],[37,11,48,49],[[30,[-1,-2]],48,49]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[59,[-1,-2]]],[[59,[-1,-2]]],[2,11,5],[[28,[-1]],5]],[[[58,[-3,-1,-2]]],[[58,[-3,-1,-2]]],[11,48,49,5],[37,11,48,49,5],[[30,[-1,-2]],48,49,5]],[[-1,-2],6,[],[]],[[-1,-2],6,[],[]],[[[59,[-1,-2]],9],10,[2,11,11],[[28,[-1]],11]],[[[58,[-3,-1,-2]],9],10,[11,48,49,11],[37,11,48,49,11],[[30,[-1,-2]],48,49,11]],[-1,-1,[]],[-1,-1,[]],[[[59,[-1,-2]]],[[22,[[21,[20]]]]],[2,11],[[28,[-1]]]],[-1,-2,[],[]],[-1,-2,[],[]],[[[59,[-1,-2]],[1,[-1]]],[[22,[[21,[20]]]]],[2,11],[[28,[-1]]]],[[[58,[-3,-1,-2]],-1,39],[[44,[-1,-2]]],[11,48,49],[37,11,48,49],[[30,[-1,-2]],48,49]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[-1,[[59,[-2,-1]]],[],[]],[-1,[[58,[-1,-2,-3]]],[],[],[]],0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[60,60],[[-1,-2],6,[],[]],[[60,60],7],[[-1,-2],7,[],[]],0,[[60,9],10],[[60,9],10],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,24,[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,14,[]]],"c":[],"p":[[3,"Root",7],[8,"Aggregate",7],[4,"Option",357],[4,"Result",358],[8,"Clone",359],[15,"tuple"],[15,"bool"],[8,"PartialEq",360],[3,"Formatter",361],[6,"Result",361],[8,"Debug",361],[6,"Envelope",152],[8,"From",362],[3,"TypeId",363],[15,"str"],[6,"Version",338],[4,"GetError",36],[8,"Display",361],[15,"never"],[8,"Future",364],[3,"Box",365],[3,"Pin",366],[8,"Error",367],[3,"String",368],[3,"AnyError",64],[3,"Error",369],[3,"AnyRepositoryImpl",64],[8,"Repository",36],[3,"EventSourced",90],[8,"Store",152],[4,"GetError",90],[4,"SaveError",90],[6,"Envelope",135],[3,"Scenario",142],[3,"Persisted",152],[3,"Vec",370],[8,"Message",247],[4,"StreamVersionExpected",152],[4,"VersionSelect",152],[8,"Deserializer",371],[8,"Deserialize",371],[8,"Serialize",372],[8,"Serializer",372],[6,"Stream",152],[3,"InMemory",214],[8,"Eq",360],[8,"Hash",373],[8,"Send",374],[8,"Sync",374],[3,"Tracking",214],[3,"Envelope",247],[8,"Fn",375],[15,"u8"],[3,"JsonSerde",276],[3,"MessageSerde",291],[8,"Message",376],[8,"Default",377],[3,"InstrumentedEventStore",306],[3,"InstrumentedAggregateRepository",306],[3,"ConflictError",338],[8,"AnyRepositoryExt",64],[8,"Handler",135],[8,"Streamer",152],[8,"Appender",152],[8,"EventStoreExt",214],[8,"Serde",270],[8,"AggregateRepositoryExt",306],[8,"EventStoreExt",306]]},\
"eventually_macros":{"doc":"Module containing useful macros for the eventually crate.","t":"YX","n":["Message","aggregate_root"],"q":[[0,"eventually_macros"]],"d":["","Implements a newtype to use the eventually::aggregate::Root…"],"i":[0,0],"f":[0,0],"c":[],"p":[]},\
"eventually_postgres":{"doc":"","t":"HAANNNNNNNNNNEDNELLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLENNNNNNNNNNDENLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMM","n":["MIGRATIONS","aggregate","event","AppendEvent","BeginTransaction","CommitTransaction","Concurrency","Conflict","ConvertAggregate","Database","Database","DeserializeAggregate","FetchAggregateRow","GetError","Repository","SaveAggregateState","SaveError","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","get","into","into","into","new","save","source","source","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","AppendError","AppendEvent","BeginTransaction","CommitTransaction","Concurrency","Conflict","ConvertEvent","Database","Database","DeserializeEvent","ReadColumn","Store","StreamError","UpsertEventStream","append","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","new","source","source","stream","to_owned","to_string","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","error","name"],"q":[[0,"eventually_postgres"],[3,"eventually_postgres::aggregate"],[58,"eventually_postgres::event"],[112,"eventually_postgres::event::StreamError"],[114,"eventually::aggregate"],[115,"core::clone"],[116,"core::convert"],[117,"eventually::serde"],[118,"core::fmt"],[119,"core::fmt"],[120,"core::future::future"],[121,"alloc::boxed"],[122,"core::pin"],[123,"core::marker"],[124,"core::marker"],[125,"sqlx_core::migrate::error"],[126,"core::result"],[127,"eventually::aggregate"],[128,"core::option"],[129,"alloc::string"],[130,"core::any"],[131,"eventually::event"],[132,"eventually::event"],[133,"alloc::string"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,11,11,11,11,11,10,10,11,10,10,0,0,11,0,1,10,11,1,10,11,1,1,1,10,10,11,11,1,10,10,11,11,1,1,10,11,1,1,10,11,1,10,11,1,10,11,1,10,11,1,10,11,1,10,11,0,32,32,32,32,32,31,31,32,31,31,0,0,32,26,31,32,26,31,32,26,26,26,31,31,32,32,26,31,32,32,26,31,32,26,26,31,32,26,26,31,32,31,32,26,31,32,26,31,32,26,31,32,26,36,36],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[1,[-1,-2,-3,-4,-5]]],[[1,[-1,-2,-3,-4,-5]]],[2,3],[[4,[-1]],3],[4,3],[[5,[-2]],3],[[5,[-3]],3]],[[-1,-2],6,[],[]],[[[1,[-1,-2,-3,-4,-5]],7],8,[2,9],[[4,[-1]],9],[4,9],[[5,[-2]],9],[[5,[-3]],9]],[[10,7],8],[[10,7],8],[[11,7],8],[[11,7],8],[-1,-1,[]],[-1,-1,[]],[12,10],[-1,-1,[]],[12,11],[[[1,[-1,-2,-3,-4,-5]]],[[15,[[14,[13]]]]],[],[[4,[-1]],16,17],[4,16,17],[[5,[-2]],16,17],[[5,[-3]],16,17]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[18,-3,-5],[[20,[[1,[-1,-2,-4,-3,-5]],19]]],2,[[4,[-1]]],[[5,[-2]]],4,[[5,[-4]]]],[[[1,[-1,-2,-3,-4,-5]],[21,[-1]]],[[15,[[14,[13]]]]],[],[[4,[-1]],16,17],[4,16,17],[[5,[-2]],16,17],[[5,[-3]],16,17]],[10,[[23,[22]]]],[11,[[23,[22]]]],[-1,-2,[],[]],[-1,24,[]],[-1,24,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[[26,[-1,-2,-3,-4]],-1,27,[29,[[28,[-2]]]]],[[15,[[14,[13]]]]],[30,3,16,17],[],[[4,[-2]],16,17],[[5,[-3]],16,17]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[[26,[-1,-2,-3,-4]]],[[26,[-1,-2,-3,-4]]],[30,3,3],[],[[4,[-2]],3],[[5,[-3]],3]],[[-1,-2],6,[],[]],[[31,7],8],[[31,7],8],[[32,7],8],[[32,7],8],[[[26,[-1,-2,-3,-4]],7],8,[30,3,9],[],[[4,[-2]],9],[[5,[-3]],9]],[-1,-1,[]],[12,32],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[18,-3],[[20,[[26,[-4,-1,-2,-3]],19]]],33,[[4,[-1]]],[[5,[-2]]],[30,3]],[31,[[23,[22]]]],[32,[[23,[22]]]],[[[26,[-1,-2,-3,-4]],-1,34],[[35,[-1,-2]]],[30,3,16,17],[],[[4,[-2]],16,17],[[5,[-3]],16,17]],[-1,-2,[],[]],[-1,24,[]],[-1,24,[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,[[20,[-2]]],[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0],"c":[],"p":[[3,"Repository",3],[8,"Aggregate",114],[8,"Clone",115],[8,"From",116],[8,"Serde",117],[15,"tuple"],[3,"Formatter",118],[6,"Result",118],[8,"Debug",118],[4,"GetError",3],[4,"SaveError",3],[4,"Error",119],[8,"Future",120],[3,"Box",121],[3,"Pin",122],[8,"Send",123],[8,"Sync",123],[6,"PgPool",124],[4,"MigrateError",125],[4,"Result",126],[3,"Root",114],[8,"Error",127],[4,"Option",128],[3,"String",129],[3,"TypeId",130],[3,"Store",58],[4,"StreamVersionExpected",131],[6,"Envelope",131],[3,"Vec",132],[8,"ToString",129],[4,"StreamError",58],[4,"AppendError",58],[8,"TryFrom",116],[4,"VersionSelect",131],[6,"Stream",131],[13,"ReadColumn",112]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
