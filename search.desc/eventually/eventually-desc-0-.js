searchState.loadedDescShard("eventually", 0, "<code>eventually</code> is a crate that helps you apply different …\nModule containing support for the Aggregate pattern.\nModule containing support for Domain [Command]s.\nModule <code>event</code> contains types and abstractions helpful for …\nThis module contains the definition of a Message type, …\nModule <code>query</code> contains types and helpful abstractions to …\nThis module provides traits and implementations for …\nModule containing some extension traits to support code …\nContains the types necessary for Optimistic Locking …\nAn Aggregate represents a Domain Model that, through an …\nError returned during rehydration when the Aggregate Root …\nThe error type that can be returned by <code>Aggregate::apply</code> …\nThe type of Domain Events that interest this Aggregate. …\nThe type used to uniquely identify the Aggregate.\nThis error is returned by <code>Root::rehydrate_async</code> when the …\nList of possible errors that can be returned by …\nAn Aggregate Root represents the Domain Entity object used …\nReturns the unique identifier for the Aggregate instance.\nReturns the unique identifier of the Aggregate.\nMutates the state of an Aggregate through a Domain Event.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Aggregate Root instance by applying the …\nRecords a change to the Aggregate Root, expressed by the …\nModule containing the definition of a Repository, to fetch …\nModule exposing a Scenario type to test Aggregates using …\nMaps the Aggregate value contained within Root to a …\nA unique name identifier for this Aggregate type.\nReturns the current version for the Aggregate.\nError returned when <code>Saver::save</code> encounters a conflict …\nAn Event-sourced implementation of the Repository …\nAll possible errors returned by <code>Getter::get</code>.\nTrait used to implement read access to a data store from …\nError returned when the Getter implementation has …\nError returned when the Saver implementation has …\nError returned when the Aggregate Root could not be found …\nA Repository is an object that allows to load and save an …\nAll possible errors returned by <code>Saver::save</code>.\nTrait used to implement write access to a data store, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads an aggregate::Root instance from the data store, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSaves a new version of an aggregate::Root instance to the …\nA test scenario that can be used to test an Aggregate and …\nReturns the argument unchanged.\nSpecifies the precondition for the test Scenario.\nCalls <code>U::from(self)</code>.\nCreates a new Scenario instance.\nSpecifies the action/mutation to execute in this Scenario.\nA Command represents an intent by an Actor (e.g. a User, …\nThe error type returned by the Handler while handling a […\nA software component that is able to handle [Command]s of …\nHandles a [Command] and returns an error if the handling …\nThe message payload.\nOptional metadata to provide additional context to the …\nModule exposing a test Scenario type to write Domain …\nA test scenario that can be used to test a Command Handler …\nReturns the argument unchanged.\nSets the precondition state of the system for the Scenario…\nCalls <code>U::from(self)</code>.\nSpecifies the Command to test in the Scenario, in the …\nSelects all Events in the Event Stream.\nAn Event is a Message carring the information about a …\nSelects all Events in the Event Stream starting from the […\nAn [Event] that has been persisted to the Event Store.\nStream is a stream of Persisted Domain Events.\nSpecifies the slice of the Event Stream to select when …\nThe actual Domain Event carried by this envelope.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message payload.\nOptional metadata to provide additional context to the …\nContains implementations of the <code>event::Store</code> trait and …\nThe id of the Event Stream the persisted Event belongs to.\nThe version of the Event Stream when this Event has been …\nAll possible error types returned by <code>Appender::append</code>.\nInterface used to append new Domain Events in an Event …\nError returned when <code>Appender::append</code> encounters a conflict …\nThe error type returned by the Store during a [<code>stream</code>] …\nExtension trait that can be used to pull in supertypes …\nIn-memory implementation of <code>event::Store</code> trait, backed by …\nError returned when the Appender implementation has …\nAn Event Store, used to store Domain Events in Event …\nInterface used to stream Persisted Domain Events from an …\nDecorator type for an <code>event::Store</code> implementation that …\nAppens new Domain Events to the specified Event Stream.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the list of recoded Domain Events through this …\nResets the list of recorded Domain Events through this …\nOpens an Event Stream, effectively streaming all Domain …\nReturns a <code>Tracking</code> instance that decorates the original …\nRepresents a Message packaged for persistance and/or …\nRepresents a piece of domain data that occurs in the …\nOptional metadata to attach to an Envelope to provide …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe message payload.\nOptional metadata to provide additional context to the …\nReturns the domain name of the Message.\nAdds a new entry in the Envelope’s Metadata.\nA Message carrying the Domain Query itself as payload and …\nThe error type returned by the Handler when Query …\nAn Handler describes an implementation that is able to …\nThe result type the Handler produces when evaluating a …\nEvaluates the Query provided and returns a result type, …\nThe message payload.\nOptional metadata to provide additional context to the …\nImplements the Serde trait to translate between two …\nA deserializer interface that can be used to deserialize a …\nImplements the Serializer and Deserializer traits, which …\nImplementation of Serde traits that uses ProtoJson as wire …\nImplements the Serde trait  which serializes and …\nSerializer and Deserializer that can be used to serialize …\nA serializer interface that can be used to serialize a …\nDeserializes the given value from a message encoded in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Convert serde instance.\nSerializes the given value into the protocol supported by …\nExtension trait for any <code>aggregate::Repository</code> type to …\nExtension trait for any <code>event::Store</code> type to provide …\n<code>aggregate::Repository</code> type wrapper that provides …\n<code>event::Store</code> type wrapper that provides instrumentation …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an instrumented version of the …\nReturns an instrumented version of the <code>event::Store</code> …\nDisables any kind of optimistic locking check, allowing …\nUsed to set a specific expectation during an operation …\nThis error is returned by a function when a version …\nExpects that the previous Version used for the operation …\nA version used for Optimistic Locking.\nThe actual Version value, which mismatch caused this error.\nThe Version value that was expected when calling the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")